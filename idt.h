#ifndef IDT_H
#define IDT_H

struct idt_entry_ {

	unsigned int offset1:16;
	unsigned int selector:16;
	unsigned int unused:5;
	unsigned int zero:3;
	unsigned int pattern:5;
	unsigned int ring:2;
	unsigned int present:1;
	unsigned int offset2:16;

} __attribute__ ((__packed__));

typedef idt_entry_ idt_entry;

struct idt_pointer_ {

	unsigned int base:32;
	unsigned int limit:16;
	unsigned int unused:16;

} __attribute__ ((__packed__));

typedef idt_pointer_ idt_pointer;

/*
class idt {
private:

	idt_entry* table = NULL;
	unsigned int count;

public:

	idt(void* ptr) {

		count = 17;
		table = (idt_entry*)ptr;

		table =
			{{0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x20},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0},
			 {0x0, 0x0, 0x0, 0x0, 0x13, 0x0, 0x1, 0x0}};

	} //end constructor

	void load_idt(void) {

		idt_pointer ptr;

		ptr.base = table;
		ptr.limit = count & 0xFF;
		ptr.unused = 0x0;

		asm("lidt (%0)": :"p" (&ptr));
	} //end load_idt
		
} //end class idt
*/
#endif
